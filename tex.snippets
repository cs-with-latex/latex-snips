global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def is_word(ch):
	return ch >= 'A' and ch <= 'z' or ch >= '0' and ch <= '9'

def is_char(ch):
	return ch >= 'A' and ch <= 'z'

# read predicate
def rp(str, pred):
	i = 1
	while pred(str[i]):
		i += 1
	return i

# read normal bracket
def rnb(str):
	return rb(str, lambda ch: ch == '[' or ch == '(', lambda ch: ch == ']' or ch == ')')

# read curly bracket
def rcb(str):
	return rb(str, lambda ch: ch == '{', lambda ch: ch == '}')

def depth_curly(str):
	return depth(str, lambda ch: ch == '{', lambda ch: ch == '}')

def depth(str, pred_in, pred_out):
	if not str:
		return 0
	if len(str) == 0:
		return 0
	d = 0
	for ch in str:
		if pred_in(ch):
			d += 1
		if pred_out(ch):
			d -= 1
	return d

# read bracket assuming the first is '[' or '('
# input should be like (str)
def rb(str, pred_in, pred_out):
	i = 1
	depth = 1
	while depth > 0:
		if pred_in(str[i]):
			depth += 1
		if pred_out(str[i]):
			depth -= 1
		i += 1
	return i

# return the splitted result after trimming ^ and _
def trim(str):
	try:
		if str[0] == ' ':
			a, b = trim(str[1:])
			return (str[0] + a, b)
		elif str[0] == '_' or str[0] == '^':
			if is_word(str[1]):
				a, b = trim(str[2:])
				return (str[:2] + a, b)
			else:
				a, b = trim(str[1:])
				return (str[0] + a, b)
		elif str[0] == '{':
			i = rcb(str)
			a, b = trim(str[i:])
			return (str[:i] + a, b)
		else:
			return ('', str)
	except:
		return ('', str)


def unit(str):
	result = 0
	try:
		# ignore _ and ^
		if str[0] == '_' or str[0] == '^':
			if is_word(str[1]):
				return unit(str[2:])
			else:
				return unit(str[1:])
		# ignore everything in curly brackets
		elif str[0] == '{':
			return unit(str[rcb(str):])
		# view largest parentheses as one
		elif str[0] == '(' or str[0] == '[':
			result = 1
			return unit(str[rnb(str):])+1
		# ignore blank
		elif str[0] == ' ':
			return 0 
		# each letter or keyword count as one
		elif str[0] == '\\':
			result = 1
			return unit(str[rp(str, is_char):])+1
		# series of number and word count as one
		elif is_word(str[0]):
			result = 1
			return unit(str[rp(str, is_word):])+1
		# ignore unknown character
		else:
			return unit(str[1:])
	except:
		return result
endglobal

snippet template "Basic template" b
\documentclass[UTF8,a4paper,11pt]{ctexart}
\usepackage{listings} 
\usepackage{xcolor} 
\usepackage{amsmath}
\lstset{
  basicstyle=\tt,
  keywordstyle=\color{purple}\bfseries,
  identifierstyle=\color{brown!80!black},
  commentstyle=\color{gray}
  showstringspaces=false,
  numbers = left,                
  numberstyle = \small,               
}
\title{$1}
\author{5eqn}
\date{\today}
\begin{document}
  \maketitle
  $0
\end{document}
endsnippet

snippet var "Variable" bA
\newcommand{\\$1}{$2}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet sec "Section" bA
\section{$1}
  $0
endsnippet

snippet ssec "Sub section" bA
\subsection{$1}
  $0
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

priority 100
snippet --- "cdots" iA
\cdots
endsnippet

snippet code "Code environment" b
\begin{lstlisting}[language=${1:cpp}] 
  $0
\end{lstlisting}
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet pr "parentheses" Ai
\left($1\right)
endsnippet

snippet mk "Math" wA
$${1}$
endsnippet

snippet dm "Math" wA
\[
\begin{aligned}
  $1
.\end{aligned}
\]
$0
endsnippet

context "math()"
snippet ran "range" iA
\left[$1\right]_{${2:-\infty}}^{${3:+\infty}}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}
endsnippet

priority 800
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0:
		break
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}
endsnippet

priority 100
context "math()"
snippet '([A-EI-Za-ei-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

priority 100
context "math()"
snippet 'd([A-Za-cf-hj-z])' "auto derivative" wrA
\mathrm{d}`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet 'dd([A-Za-ce-z])' "auto divided derivative" wrA
\frac{\mathrm{d}}{\mathrm{d}`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet 'ddd([A-Za-z])([A-Za-z])' "auto divided double derivative" wrA
\frac{\mathrm{d}`!p snip.rv = match.group(1)`}{\mathrm{d}`!p snip.rv = match.group(2)`}
endsnippet

priority 100
context "math() and depth_curly(match.group(2)) == 0"
snippet '((?:[fghFGH]|\\Phi)(?:|_.|_{.*})(?:|\^.|\^{(.*)}))(\w)' "auto function" wrA
`!p snip.rv = match.group(1)`\\left(`!p snip.rv = match.group(3)`$1\\right)
endsnippet

snippet sympy "sympyblock " w
sympy $1 sympy
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

snippet mop "mathop" iA
\mathop{$1}
endsnippet

snippet max "max" iA
\mathop{\max}
endsnippet

snippet min "min" iA
\mathop{\min}
endsnippet

priority 100
context "math()"
snippet == "equals direct" iA
&=
endsnippet

priority 200
context "math()"
snippet == "equals" wA
\\\\&=
endsnippet

context "math()"
snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil 
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor
endsnippet

priority 300
context "math()"
snippet dia2 "diagonal matrix" iA
\begin{pmatrix}$1&\\\\&$2\end{pmatrix}
endsnippet

priority 300
context "math()"
snippet dia3 "diagonal matrix" iA
\begin{pmatrix}$1&&\\\\&$2&\\\\&&$3\end{pmatrix}
endsnippet

priority 300
context "math()"
snippet dia4 "diagonal matrix" iA
\begin{pmatrix}$1&&&\\\\&$2&&\\\\&&$3&\\\\&&&$4\end{pmatrix}
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} 
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} 
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}
endsnippet

snippet sum "sum" iA
\sum_{${1:i=${2:1}}}^{${3:\infty}}
endsnippet

snippet lim "limit" iA
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" iA
\prod_{${1:i=${2:1}}}^{${3:\infty}} 
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{$1}
endsnippet

priority 100
context "math()"
snippet sr "^2" iA
^{2}
endsnippet

context "math()"
snippet "([fghFGH]|\\Phi)'" "auto derivative" irA
`!p snip.rv=match.group(1)`^{'}
endsnippet

context "math()"
snippet "([fghFGH]|\\Phi)\^{'}'" "auto double derivative" irA
`!p snip.rv=match.group(1)`^{''}
endsnippet

context "math()"
snippet "([fghFGH]|\\Phi)\^{''}'" "auto multiple derivative" irA
`!p snip.rv=match.group(1)`^{^{($1)}}
endsnippet

priority 200
context "math()"
snippet '(sin|cos|tan|cot|sec|csc)((?:\s|\(|\\left\()\S+(?:\s|\)|\\right\)))psr' "^2 for func" irA
`!p snip.rv=match.group(1)`^2`!p snip.rv=match.group(2)`
endsnippet

priority 300
context "math()"
snippet "([fghFGH]|\\Phi)((?:|'+)(?:|_.|_{.*})(?:\(|\\left\()\S+(?:\)|\\right\)))psr" "^2 for func" irA
`!p snip.rv=match.group(1)`^2`!p snip.rv=match.group(2)`
endsnippet

priority 300
context "math()"
snippet "([fghFGH]|\\Phi)\^(\S)((?:\(|\\left\()\S+(?:\)|\\right\)))psr" "^2 for single powered func" irA
`!p snip.rv=match.group(1)`^{`!p snip.rv=match.group(2)`2}`!p snip.rv=match.group(3)`
endsnippet

priority 300
context "math()"
snippet "([fghFGH]|\\Phi)\^{(.+)}((?:\(|\\left\()\S+(?:\)|\\right\)))psr" "^2 for dual powered func" irA
`!p snip.rv=match.group(1)`^{`!p snip.rv=match.group(2)`2}`!p snip.rv=match.group(3)`
endsnippet

priority 100
context "math()"
snippet cb "^3" iA
^{3}
endsnippet

priority 200
context "math()"
snippet '(sin|cos|tan|cot|sec|csc)((?:\s|\(|\\left\()\S+(?:\s|\)|\\right\)))pcb' "^3 for func" irA
`!p snip.rv=match.group(1)`^3`!p snip.rv=match.group(2)`
endsnippet

priority 300
context "math()"
snippet "([fghFGH]|\\Phi)((?:|'+)(?:|_.|_{.*})(?:\(|\\left\()\S+(?:\)|\\right\)))pcb" "^3 for func" irA
`!p snip.rv=match.group(1)`^3`!p snip.rv=match.group(2)`
endsnippet

priority 300
context "math()"
snippet "([fghFGH]|\\Phi)\^(\S)((?:\(|\\left\()\S+(?:\)|\\right\)))pcb" "^3 for single powered func" irA
`!p snip.rv=match.group(1)`^{`!p snip.rv=match.group(2)`3}`!p snip.rv=match.group(3)`
endsnippet

priority 300
context "math()"
snippet "([fghFGH]|\\Phi)\^{(.+)}((?:\(|\\left\()\S+(?:\)|\\right\)))pcb" "^3 for dual powered func" irA
`!p snip.rv=match.group(1)`^{`!p snip.rv=match.group(2)`3}`!p snip.rv=match.group(3)`
endsnippet

priority 100
context "math()"
snippet td "to the ... power" iA
^{$1}
endsnippet

priority 200
context "math()"
snippet '(sin|cos|tan|cot|sec|csc)((?:\s|\(|\\left\()\S+(?:\s|\)|\\right\)))ptd' "^n for func" irA
`!p snip.rv=match.group(1)`^{$1}`!p snip.rv=match.group(2)`
endsnippet

priority 300
context "math()"
snippet "([fghFGH]|\\Phi)((?:|'+)(?:|_.|_{.*})(?:\(|\\left\()\S+(?:\)|\\right\)))ptd" "^n for func" irA
`!p snip.rv=match.group(1)`^{$1}`!p snip.rv=match.group(2)`
endsnippet

priority 300
context "math()"
snippet "([fghFGH]|\\Phi)\^(\S)((?:\(|\\left\()\S+(?:\)|\\right\)))ptd" "^n for single powered func" irA
`!p snip.rv=match.group(1)`^{`!p snip.rv=match.group(2)`$1}`!p snip.rv=match.group(3)`
endsnippet

priority 300
context "math()"
snippet "([fghFGH]|\\Phi)\^{(.+)}((?:\(|\\left\()\S+(?:\)|\\right\)))ptd" "^n for dual powered func" irA
`!p snip.rv=match.group(1)`^{`!p snip.rv=match.group(2)`$1}`!p snip.rv=match.group(3)`
endsnippet

snippet __ "subscript" iA
_{$1}
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet rm "remove style" iA
\mathrm{$1}
endsnippet

priority 300
context "math()"
snippet dint "integral" iA
\int_{${1:-\infty}}^{${2:+\infty}}
endsnippet

priority 100
context "math()"
snippet int "integral" iA
\int
endsnippet

priority 300
context "math()"
snippet '(?<!\\)(pi|zeta|lambda|alpha|mu|nabla|phi|theta|beta|gamma|eta|xi|sigma|delta)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet '(?<!\\)(Pi|Zeta|Lambda|Alpha|Phi|Theta|Beta|Gamma|Eta|Xi|Sigma|Delta)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|cot|csc|sec|ln|log|exp)' "ln" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

priority 100
context "math()"
context "unit(match.group(2)) > 1"
snippet "(sin|cos|tan|cot|csc|sec|ln|log|exp|arcsin|arccos|arctan|arccot|arcsec|arccsc)\s(\S+)" "auto bracket for function" rwA
`!p snip.rv=match.group(1)``!p 
a, b = trim(match.group(2))
snip.rv = a + '\\left(' + b
`$1\\right)
endsnippet

priority 200
context "math()"
snippet '(?<!\\)asin' "arcsin" rwA
\arcsin 
endsnippet

priority 200
context "math()"
snippet '(?<!\\)acos' "arccos" rwA
\arccos 
endsnippet

priority 200
context "math()"
snippet '(?<!\\)atan' "arctan" rwA
\arctan 
endsnippet

priority 200
context "math()"
snippet '(?<!\\)acot' "arccot" rwA
\arccot 
endsnippet

priority 200
context "math()"
snippet '(?<!\\)acsc' "arccsc" rwA
\arccsc 
endsnippet

priority 200
context "math()"
snippet '(?<!\\)asec' "arcsec" rwA
\arcsec 
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet comp "complement" iA
^{c}
endsnippet

context "math()"
snippet tran "transpose" iA
^{T}
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

snippet || "abs" iA
\left| $1 \right|
endsnippet

context "math()"
snippet set "set" iA
\left\\{$1\right\\}
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}}
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}}
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet

context "math()"
snippet case "cases" iA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} $1 \\\\ $2 \\\\ \vdots\\\\ $3 \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

# vim:ft=snippets
